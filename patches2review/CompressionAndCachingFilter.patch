Index: web/src/main/webapp/WEB-INF/web.xml
===================================================================
--- web/src/main/webapp/WEB-INF/web.xml	(revision 6ec4b86dbd3dd24b478766d457f78d983516fbce)
+++ web/src/main/webapp/WEB-INF/web.xml	(revision )
@@ -28,6 +28,11 @@
         </init-param>
     </filter>
 
+	<filter>
+		<filter-name>CompressionFilter</filter-name>
+		<filter-class>de.betterform.agent.web.filter.compress.GZIPFilter</filter-class>
+    </filter>
+
 	<!--
 	<filter>
 		<filter-name>XSLTFilter</filter-name>
@@ -55,8 +60,28 @@
 		<url-pattern>*.xhtml</url-pattern>
 	</filter-mapping>
 
+    <!-- enabled Compression (use only with optimized JavaScript (fails in dojodev mode)-->
 <!--
     <filter-mapping>
+        <filter-name>CompressionFilter</filter-name>
+        <url-pattern>/resources/*</url-pattern>
+    </filter-mapping>
+    <filter-mapping>
+        <filter-name>CompressionFilter</filter-name>
+        <url-pattern>*.html</url-pattern>
+    </filter-mapping>
+-->
+
+    <!-- chain for mapping *.xhtml does not work yet -->
+<!--
+    <filter-mapping>
+        <filter-name>CompressionFilter</filter-name>
+        <url-pattern>*.xhtml</url-pattern>
+    </filter-mapping>
+-->
+
+<!--
+    <filter-mapping>
         <filter-name>XSLTFilter</filter-name>
         <servlet-name>inspector</servlet-name>
     </filter-mapping>
Index: web/src/main/java/de/betterform/agent/web/filter/compress/GZIPResponseWrapper.java
===================================================================
--- web/src/main/java/de/betterform/agent/web/filter/compress/GZIPResponseWrapper.java	(revision )
+++ web/src/main/java/de/betterform/agent/web/filter/compress/GZIPResponseWrapper.java	(revision )
@@ -0,0 +1,71 @@
+/*
+ * Copyright 2003 Jayson Falkner (jayson@jspinsider.com)
+ * This code is from "Servlets and JavaServer pages; the J2EE Web Tier",
+ * http://www.jspbook.com. You may freely use the code both commercially
+ * and non-commercially. If you like the code, please pick up a copy of
+ * the book and help support the authors, development of more free code,
+ * and the JSP/Servlet/J2EE community.
+ */
+package de.betterform.agent.web.filter.compress;
+
+import java.io.*;
+import java.util.*;
+import javax.servlet.*;
+import javax.servlet.http.*;
+
+public class GZIPResponseWrapper extends HttpServletResponseWrapper {
+  protected HttpServletResponse origResponse = null;
+  protected ServletOutputStream stream = null;
+  protected PrintWriter writer = null;
+
+  public GZIPResponseWrapper(HttpServletResponse response) {
+    super(response);
+    origResponse = response;
+  }
+
+  public ServletOutputStream createOutputStream() throws IOException {
+    return (new GZIPResponseStream(origResponse));
+  }
+
+  public void finishResponse() {
+    try {
+      if (writer != null) {
+        writer.close();
+      } else {
+        if (stream != null) {
+          stream.close();
+        }
+      }
+    } catch (IOException e) {}
+  }
+
+  public void flushBuffer() throws IOException {
+    stream.flush();
+  }
+
+  public ServletOutputStream getOutputStream() throws IOException {
+    if (writer != null) {
+      throw new IllegalStateException("getWriter() has already been called!");
+    }
+
+    if (stream == null)
+      stream = createOutputStream();
+    return (stream);
+  }
+
+  public PrintWriter getWriter() throws IOException {
+    if (writer != null) {
+      return (writer);
+    }
+
+    if (stream != null) {
+      throw new IllegalStateException("getOutputStream() has already been called!");
+    }
+
+   stream = createOutputStream();
+   writer = new PrintWriter(new OutputStreamWriter(stream, "UTF-8"));
+   return (writer);
+  }
+
+  public void setContentLength(int length) {}
+}
Index: web/src/main/java/de/betterform/agent/web/filter/cache/CacheResponseWrapper.java
===================================================================
--- web/src/main/java/de/betterform/agent/web/filter/cache/CacheResponseWrapper.java	(revision )
+++ web/src/main/java/de/betterform/agent/web/filter/cache/CacheResponseWrapper.java	(revision )
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2003 Jayson Falkner (jayson@jspinsider.com)
+ * This code is from "Servlets and JavaServer pages; the J2EE Web Tier",
+ * http://www.jspbook.com. You may freely use the code both commercially
+ * and non-commercially. If you like the code, please pick up a copy of
+ * the book and help support the authors, development of more free code,
+ * and the JSP/Servlet/J2EE community.
+ */
+package de.betterform.agent.web.filter.cache;
+
+import java.io.*;
+import javax.servlet.*;
+import javax.servlet.http.*;
+
+public class CacheResponseWrapper
+    extends HttpServletResponseWrapper {
+  protected HttpServletResponse origResponse = null;
+  protected ServletOutputStream stream = null;
+  protected PrintWriter writer = null;
+  protected OutputStream cache = null;
+
+  public CacheResponseWrapper(HttpServletResponse response,
+      OutputStream cache) {
+    super(response);
+    origResponse = response;
+    this.cache = cache;
+  }
+
+  public ServletOutputStream createOutputStream()
+      throws IOException {
+    return (new CacheResponseStream(origResponse, cache));
+  }
+
+  public void flushBuffer() throws IOException {
+    stream.flush();
+  }
+
+  public ServletOutputStream getOutputStream()
+      throws IOException {
+    if (writer != null) {
+      throw new IllegalStateException(
+        "getWriter() has already been called!");
+    }
+
+    if (stream == null)
+      stream = createOutputStream();
+    return (stream);
+  }
+
+  public PrintWriter getWriter() throws IOException {
+    if (writer != null) {
+      return (writer);
+    }
+
+    if (stream != null) {
+      throw new IllegalStateException(
+        "getOutputStream() has already been called!");
+    }
+
+   stream = createOutputStream();
+   writer = new PrintWriter(new OutputStreamWriter(stream, "UTF-8"));
+   return (writer);
+  }
+}
Index: web/src/main/java/de/betterform/agent/web/filter/cache/CacheResponseStream.java
===================================================================
--- web/src/main/java/de/betterform/agent/web/filter/cache/CacheResponseStream.java	(revision )
+++ web/src/main/java/de/betterform/agent/web/filter/cache/CacheResponseStream.java	(revision )
@@ -0,0 +1,74 @@
+/*
+ * Copyright 2003 Jayson Falkner (jayson@jspinsider.com)
+ * This code is from "Servlets and JavaServer pages; the J2EE Web Tier",
+ * http://www.jspbook.com. You may freely use the code both commercially
+ * and non-commercially. If you like the code, please pick up a copy of
+ * the book and help support the authors, development of more free code,
+ * and the JSP/Servlet/J2EE community.
+ */
+package de.betterform.agent.web.filter.cache;
+
+import java.io.*;
+import javax.servlet.*;
+import javax.servlet.http.*;
+
+public class CacheResponseStream extends ServletOutputStream {
+  protected boolean closed = false;
+  protected HttpServletResponse response = null;
+  protected ServletOutputStream output = null;
+  protected OutputStream cache = null;
+
+  public CacheResponseStream(HttpServletResponse response,
+      OutputStream cache) throws IOException {
+    super();
+    closed = false;
+    this.response = response;
+    this.cache = cache;
+  }
+
+  public void close() throws IOException {
+    if (closed) {
+      throw new IOException(
+        "This output stream has already been closed");
+    }
+    cache.close();
+    closed = true;
+  }
+
+  public void flush() throws IOException {
+    if (closed) {
+      throw new IOException(
+        "Cannot flush a closed output stream");
+    }
+    cache.flush();
+  }
+
+  public void write(int b) throws IOException {
+    if (closed) {
+      throw new IOException(
+        "Cannot write to a closed output stream");
+    }
+    cache.write((byte)b);
+  }
+
+  public void write(byte b[]) throws IOException {
+    write(b, 0, b.length);
+  }
+
+  public void write(byte b[], int off, int len)
+    throws IOException {
+    if (closed) {
+      throw new IOException(
+       "Cannot write to a closed output stream");
+    }
+    cache.write(b, off, len);
+  }
+
+  public boolean closed() {
+    return (this.closed);
+  }
+  
+  public void reset() {
+    //noop
+  }
+}
Index: web/src/main/java/de/betterform/agent/web/filter/cache/CacheFilter.java
===================================================================
--- web/src/main/java/de/betterform/agent/web/filter/cache/CacheFilter.java	(revision )
+++ web/src/main/java/de/betterform/agent/web/filter/cache/CacheFilter.java	(revision )
@@ -0,0 +1,114 @@
+/*
+ * Copyright 2003 Jayson Falkner (jayson@jspinsider.com)
+ * This code is from "Servlets and JavaServer pages; the J2EE Web Tier",
+ * http://www.jspbook.com. You may freely use the code both commercially
+ * and non-commercially. If you like the code, please pick up a copy of
+ * the book and help support the authors, development of more free code,
+ * and the JSP/Servlet/J2EE community.
+ */
+package de.betterform.agent.web.filter.cache;
+
+import java.io.*;
+import javax.servlet.*;
+import javax.servlet.http.*;
+import java.util.*;
+
+public class CacheFilter implements Filter {
+  ServletContext sc;
+  FilterConfig fc;
+  long cacheTimeout = Long.MAX_VALUE;
+
+  public void doFilter(ServletRequest req, ServletResponse res,
+                       FilterChain chain)
+                       throws IOException, ServletException {
+    HttpServletRequest request = (HttpServletRequest) req;
+    HttpServletResponse response = (HttpServletResponse) res;
+
+    // check if was a resource that shouldn't be cached.
+    String r = sc.getRealPath("");
+    String path = fc.getInitParameter(request.getRequestURI());
+    if (path!= null && path.equals("nocache")) {
+      chain.doFilter(request, response);
+      return;
+    }
+    path = r+path;
+
+    // customize to match parameters
+    String id = request.getRequestURI()+request.getQueryString();
+    // optionally append i18n sensitivity
+    String localeSensitive = fc.getInitParameter("locale-sensitive");
+    if (localeSensitive != null) {
+      StringWriter ldata = new StringWriter();
+      Enumeration locales = request.getLocales();
+      while (locales.hasMoreElements()) {
+        Locale locale = (Locale)locales.nextElement();
+        ldata.write(locale.getISO3Language());
+      }
+      id = id + ldata.toString();
+    }
+    File tempDir = (File)sc.getAttribute(
+      "javax.servlet.context.tempdir");
+
+    // get possible cache
+    String temp = tempDir.getAbsolutePath();
+    File file = new File(temp+id);
+
+    // get current resource
+    if (path == null) {
+      path = sc.getRealPath(request.getRequestURI());
+    }
+    File current = new File(path);
+
+    try {
+      long now = Calendar.getInstance().getTimeInMillis();
+      //set timestamp check
+      if (!file.exists() || (file.exists() &&
+          current.lastModified() > file.lastModified()) ||
+          cacheTimeout < now - file.lastModified()) {
+        String name = file.getAbsolutePath();
+        name = name.substring(0,name.lastIndexOf("/")==-1?0:name.lastIndexOf("/"));
+        new File(name).mkdirs();
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        CacheResponseWrapper wrappedResponse =
+          new CacheResponseWrapper(response, baos);
+        chain.doFilter(req, wrappedResponse);
+
+        FileOutputStream fos = new FileOutputStream(file);
+        fos.write(baos.toByteArray());
+        fos.flush();
+        fos.close();
+      }
+    } catch (ServletException e) {
+      if (!file.exists()) {
+        throw new ServletException(e);
+      }
+    }
+    catch (IOException e) {
+      if (!file.exists()) {
+        throw e;
+      }
+    }
+
+    FileInputStream fis = new FileInputStream(file);
+    String mt = sc.getMimeType(request.getRequestURI());
+    response.setContentType(mt);
+    ServletOutputStream sos = res.getOutputStream();
+    for (int i = fis.read(); i!= -1; i = fis.read()) {
+      sos.write((byte)i);
+    }
+  }
+
+  public void init(FilterConfig filterConfig) {
+    this.fc = filterConfig;
+    String ct = fc.getInitParameter("cacheTimeout");
+    if (ct != null) {
+      cacheTimeout = 60*1000*Long.parseLong(ct);
+    }
+    this.sc = filterConfig.getServletContext();
+  }
+
+  public void destroy() {
+    this.sc = null;
+    this.fc = null;
+  }
+}
Index: web/src/main/webapp/jsp/TestCache.jsp
===================================================================
--- web/src/main/webapp/jsp/TestCache.jsp	(revision )
+++ web/src/main/webapp/jsp/TestCache.jsp	(revision )
@@ -0,0 +1,42 @@
+<%@ page import="java.util.*, java.net.*, java.io.*" %>
+<%
+  String url = request.getParameter("url");
+  long[] times = new long[2];
+  if (url != null) {
+    for (int i=0;i<2;i++) {
+      long start = Calendar.getInstance().getTimeInMillis();
+      URL u = new URL(url);
+      HttpURLConnection huc =
+        (HttpURLConnection)u.openConnection();
+      huc.setRequestProperty("user-agent","Mozilla(MSIE)");
+      huc.connect();
+      ByteArrayOutputStream baos = new ByteArrayOutputStream();
+      InputStream is = huc.getInputStream();
+      while(is.read() != -1) {
+        baos.write((byte)is.read());
+      }
+      long stop = Calendar.getInstance().getTimeInMillis();
+      times[i] = stop-start;
+    }
+  }
+  request.setAttribute("t1", new Long(times[0]));
+  request.setAttribute("t2", new Long(times[1]));
+  request.setAttribute("url", url);
+
+%><html>
+<head>
+  <title>Cache Test</title>
+</head>
+<body>
+<h1>Cache Test Page</h1>
+Enter a URL to test.
+<form method="POST">
+<input name="url" size="50">
+<input type="submit" value="Check URL">
+</form>
+ <p><b>Testing: ${url}</b></p>
+ Request 1: ${t1} milliseconds<br/>
+ Request 2: ${t2} milliseconds<br/>
+ Time saved: ${t1-t2} milliseconds<br/>
+</body>
+</html>
Index: web/src/main/webapp/jsp/TestGZIP.jsp
===================================================================
--- web/src/main/webapp/jsp/TestGZIP.jsp	(revision )
+++ web/src/main/webapp/jsp/TestGZIP.jsp	(revision )
@@ -0,0 +1,51 @@
+<%@ page import="java.util.*, java.net.*, java.io.*" %>
+<%
+  String url = request.getParameter("url");
+  if (url != null) {
+    URL noCompress = new URL(url);
+    HttpURLConnection huc =
+      (HttpURLConnection)noCompress.openConnection();
+    huc.setRequestProperty("user-agent","Mozilla(MSIE)");
+    huc.connect();
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    InputStream is = huc.getInputStream();
+    while(is.read() != -1) {
+      baos.write((byte)is.read());
+    }
+    byte[] b1 = baos.toByteArray();
+
+    URL compress = new URL(url);
+    HttpURLConnection hucCompress =
+      (HttpURLConnection)noCompress.openConnection();
+    hucCompress.setRequestProperty("accept-encoding","gzip");
+    hucCompress.setRequestProperty("user-agent","Mozilla(MSIE)");
+    hucCompress.connect();
+    ByteArrayOutputStream baosCompress =
+      new ByteArrayOutputStream();
+    InputStream isCompress = hucCompress.getInputStream();
+    while(isCompress.read() != -1) {
+      baosCompress.write((byte)isCompress.read());
+    }
+    byte[] b2 = baosCompress.toByteArray();
+    request.setAttribute("t1", new Integer(b1.length));
+    request.setAttribute("t2", new Integer(b2.length));
+  }
+  request.setAttribute("url", url);
+
+%>
+<head>
+  <title>Compression Test</title>
+</head>
+<body>
+<h1>Compression Test</h1>
+Enter a URL to test.
+<form method="POST">
+<input name="url" size="50">
+<input type="submit" value="Check URL">
+</form>
+ <p><b>Testing: ${url}</b></p>
+ Request 1: ${t1} bytes<br/>
+ Request 2: ${t2} bytes<br/>
+ Space saved: ${t1-t2} bytes or ${(1-t2/t1)*100}%<br/>
+</body>
+</html>
Index: web/src/main/java/de/betterform/agent/web/filter/compress/GZIPResponseStream.java
===================================================================
--- web/src/main/java/de/betterform/agent/web/filter/compress/GZIPResponseStream.java	(revision )
+++ web/src/main/java/de/betterform/agent/web/filter/compress/GZIPResponseStream.java	(revision )
@@ -0,0 +1,83 @@
+/*
+ * Copyright 2003 Jayson Falkner (jayson@jspinsider.com)
+ * This code is from "Servlets and JavaServer pages; the J2EE Web Tier",
+ * http://www.jspbook.com. You may freely use the code both commercially
+ * and non-commercially. If you like the code, please pick up a copy of
+ * the book and help support the authors, development of more free code,
+ * and the JSP/Servlet/J2EE community.
+ */
+package de.betterform.agent.web.filter.compress;
+
+import java.io.*;
+import java.util.zip.GZIPOutputStream;
+import javax.servlet.*;
+import javax.servlet.http.*;
+
+public class GZIPResponseStream extends ServletOutputStream {
+  protected ByteArrayOutputStream baos = null;
+  protected GZIPOutputStream gzipstream = null;
+  protected boolean closed = false;
+  protected HttpServletResponse response = null;
+  protected ServletOutputStream output = null;
+
+  public GZIPResponseStream(HttpServletResponse response) throws IOException {
+    super();
+    closed = false;
+    this.response = response;
+    this.output = response.getOutputStream();
+    baos = new ByteArrayOutputStream();
+    gzipstream = new GZIPOutputStream(baos);
+  }
+
+  public void close() throws IOException {
+    if (closed) {
+      throw new IOException("This output stream has already been closed");
+    }
+    gzipstream.finish();
+
+    byte[] bytes = baos.toByteArray();
+
+
+    response.addHeader("Content-Length", 
+                       Integer.toString(bytes.length)); 
+    response.addHeader("Content-Encoding", "gzip");
+    output.write(bytes);
+    output.flush();
+    output.close();
+    closed = true;
+  }
+
+  public void flush() throws IOException {
+    if (closed) {
+      throw new IOException("Cannot flush a closed output stream");
+    }
+    gzipstream.flush();
+  }
+
+  public void write(int b) throws IOException {
+    if (closed) {
+      throw new IOException("Cannot write to a closed output stream");
+    }
+    gzipstream.write((byte)b);
+  }
+
+  public void write(byte b[]) throws IOException {
+    write(b, 0, b.length);
+  }
+
+  public void write(byte b[], int off, int len) throws IOException {
+    System.out.println("writing...");
+    if (closed) {
+      throw new IOException("Cannot write to a closed output stream");
+    }
+    gzipstream.write(b, off, len);
+  }
+
+  public boolean closed() {
+    return (this.closed);
+  }
+  
+  public void reset() {
+    //noop
+  }
+}
Index: web/src/main/webapp/jsp/TimeMonger.jsp
===================================================================
--- web/src/main/webapp/jsp/TimeMonger.jsp	(revision )
+++ web/src/main/webapp/jsp/TimeMonger.jsp	(revision )
@@ -0,0 +1,16 @@
+<html>
+  <head>
+    <title>Cache Filter Test</title>
+  </head>
+  <body>
+A test of the cache Filter.
+<%
+ // mock time-consuming code
+ for (int i=0;i<100000;i++) {
+   for (int j=0;j<1000;j++) {
+     //noop
+   }
+ }
+%>
+  </body>
+</html>
Index: web/src/main/java/de/betterform/agent/web/filter/compress/GZIPFilter.java
===================================================================
--- web/src/main/java/de/betterform/agent/web/filter/compress/GZIPFilter.java	(revision )
+++ web/src/main/java/de/betterform/agent/web/filter/compress/GZIPFilter.java	(revision )
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2003 Jayson Falkner (jayson@jspinsider.com)
+ * This code is from "Servlets and JavaServer pages; the J2EE Web Tier",
+ * http://www.jspbook.com. You may freely use the code both commercially
+ * and non-commercially. If you like the code, please pick up a copy of
+ * the book and help support the authors, development of more free code,
+ * and the JSP/Servlet/J2EE community.
+ */
+package de.betterform.agent.web.filter.compress;
+
+import java.io.*;
+import javax.servlet.*;
+import javax.servlet.http.*;
+
+public class GZIPFilter implements Filter {
+
+  public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
+    if (req instanceof HttpServletRequest) {
+      HttpServletRequest request = (HttpServletRequest) req;
+      HttpServletResponse response = (HttpServletResponse) res;
+      String ae = request.getHeader("accept-encoding");
+      if (ae != null && ae.indexOf("gzip") != -1) {
+        System.out.println("GZIP supported, compressing.");
+        GZIPResponseWrapper wrappedResponse = new GZIPResponseWrapper(response);
+        chain.doFilter(req, wrappedResponse);
+        wrappedResponse.finishResponse();
+        return;
+      }
+      chain.doFilter(req, res);
+    }
+  }
+
+  public void init(FilterConfig filterConfig) {
+    // noop
+  }
+
+  public void destroy() {
+    // noop
+  }
+}
